Index: src/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from game.GameEngine import GameEngine\nfrom game.GridMap import GridMap\nfrom game.GameRender import GameRender\nfrom game.objects.Tree import Tree\nfrom game.tiles.GrassTile import GrassTile\nfrom game.tiles.WaterTile import WaterTile\n\ngrid_size = (10, 10)\ntile_size = 50\nscreen_size = (grid_size[0] * tile_size + (2 * tile_size) + 200, grid_size[1] * tile_size + (2 * tile_size))\n\n# Create a GameWorld instance\ngame_world = GridMap(grid_size)\n\n# Map\nfor row in range(0, 10):\n    for col in range(5):\n        tile = GrassTile(row, col)\n        game_world.map[row][col] = tile\n        game_world.map[col][0].add_game_object(Tree(position=(col, 0)))\n\nfor row in range(0, 10):\n    for col in range(5, 10):\n        tile = WaterTile(row, col)\n        game_world.map[row][col] = tile\n\n# Create Game Render instance\ngame_render = GameRender(screen_size, grid_size, tile_size)\n\n# Create Game Engine instance\ngame_engine = GameEngine(game_world, game_render)\n\n# Start the game loop\ngame_engine.run()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main.py b/src/main.py
--- a/src/main.py	(revision 606ddaa80b277ef973d833d847f4592bbcb6099c)
+++ b/src/main.py	(date 1710335494790)
@@ -15,9 +15,9 @@
 # Map
 for row in range(0, 10):
     for col in range(5):
-        tile = GrassTile(row, col)
-        game_world.map[row][col] = tile
-        game_world.map[col][0].add_game_object(Tree(position=(col, 0)))
+        game_world.map[row][col] = GrassTile(row, col)
+    game_world.map[row][0].add_game_object(Tree(game_world.map[row][0]))
+    print('Tree added to', row, 0, game_world.map[row][0].game_objects)
 
 for row in range(0, 10):
     for col in range(5, 10):
Index: src/game/objects/Tree.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\n\nfrom game.objects.GameObject import GameObject\n\n\nclass Tree(GameObject):\n    def __init__(self, position, health=100):\n        super().__init__(position)\n        self.health = health\n        self.sprite = pygame.image.load('src/game/assets/tree.png') # Inefficient to load the image every time a tree is created\n        self.scaled_sprite = pygame.transform.scale(self.sprite, (20, 60))\n        self.rect = self.scaled_sprite.get_rect()\n\n    def update(self, game_world):\n        pass\n\n    def render(self, game_render):\n        row, col = self.position\n        tile_rect = pygame.Rect(col * game_render.tile_size + game_render.tile_size, row * game_render.tile_size + game_render.tile_size,\n                                        game_render.tile_size, game_render.tile_size)\n        self.rect.center = tile_rect.midtop\n        game_render.screen.blit(self.scaled_sprite.convert_alpha(), self.rect)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/objects/Tree.py b/src/game/objects/Tree.py
--- a/src/game/objects/Tree.py	(revision 606ddaa80b277ef973d833d847f4592bbcb6099c)
+++ b/src/game/objects/Tree.py	(date 1710335359304)
@@ -4,8 +4,8 @@
 
 
 class Tree(GameObject):
-    def __init__(self, position, health=100):
-        super().__init__(position)
+    def __init__(self, tile, health=100):
+        super().__init__(tile)
         self.health = health
         self.sprite = pygame.image.load('src/game/assets/tree.png') # Inefficient to load the image every time a tree is created
         self.scaled_sprite = pygame.transform.scale(self.sprite, (20, 60))
@@ -15,8 +15,7 @@
         pass
 
     def render(self, game_render):
-        row, col = self.position
-        tile_rect = pygame.Rect(col * game_render.tile_size + game_render.tile_size, row * game_render.tile_size + game_render.tile_size,
+        tile_rect = pygame.Rect(self.position[0] * game_render.tile_size + game_render.tile_size, self.position[1] * game_render.tile_size + game_render.tile_size,
                                         game_render.tile_size, game_render.tile_size)
         self.rect.center = tile_rect.midtop
         game_render.screen.blit(self.scaled_sprite.convert_alpha(), self.rect)
Index: src/game/objects/GameObject.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class GameObject:\n    def __init__(self, position):\n        self.position = position\n\n    def update(self, game_world):\n        pass\n\n    def render(self, renderer):\n        pass\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/objects/GameObject.py b/src/game/objects/GameObject.py
--- a/src/game/objects/GameObject.py	(revision 606ddaa80b277ef973d833d847f4592bbcb6099c)
+++ b/src/game/objects/GameObject.py	(date 1710335413456)
@@ -1,9 +1,10 @@
 class GameObject:
-    def __init__(self, position):
-        self.position = position
+    def __init__(self, tile):
+        self.tile = tile
+        self.position = (tile.row, tile.col)
 
     def update(self, game_world):
         pass
 
-    def render(self, renderer):
+    def render(self, game_render):
         pass
